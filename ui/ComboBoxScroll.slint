import { ScrollView, Palette, HorizontalBox } from "std-widgets.slint";
import { ReelixPalette,ReelixFontSettings, Icons, FocusBorder, ListItem } from "./globale.slint";

export component ComboBoxBase {
    in property <[string]> model;
    in property <bool> enabled <=> i-focus-scope.enabled;
    out property <bool> has-focus: i-focus-scope.has-focus && root.enabled;
    out property <bool> pressed <=> i-touch-area.pressed;
    out property <bool> has-hover: i-touch-area.has-hover;
    in-out property <int> current-index: 0;
    in-out property <string> current-value: root.model[root.current-index];

    callback selected(/* current-value */ string);
    callback show-popup();
    callback close-popup();

    public function select(index: int) {
        if (!root.enabled) {
            return;
        }

        root.current-index = index;
        root.current-value = root.model[root.current-index];
        root.selected(root.current-value);
    }

    public function move-selection-up() {
        root.select(Math.max(root.current-index - 1, 0));
    }

    public function move-selection-down() {
        root.select(Math.min(root.current-index + 1, root.model.length - 1));
    }

    private property <length> scroll-delta: 2px;

    forward-focus: i-focus-scope;

    i-focus-scope := FocusScope {
        key-pressed(event) => {
            if (!self.enabled) {
                return reject;
            }

            if (event.text == Key.UpArrow) {
                root.move-selection-up();
                return accept;
            } else if (event.text == Key.DownArrow) {
                root.move-selection-down();
                return accept;
            } else if (event.text == Key.Return) {
                root.show-popup();
            } else if (event.text == Key.Space) {
                root.show-popup();
            } else if (event.text == Key.Escape) {
                root.close-popup()
            } else if (event.text == Key.Tab) {
                root.close-popup()
            }

            return reject;
        }

        i-touch-area := TouchArea {
            enabled: root.enabled;

            clicked => {
                root.focus();
                root.show-popup();
            }

            scroll-event(event) => {
                if (event.delta-y < -root.scroll-delta) {
                    root.move-selection-down();
                    return accept;
                }

                if (event.delta-y > root.scroll-delta) {
                    root.move-selection-up();
                    return accept;
                }

                reject
            }
        }
    }
}

export component ComboBoxScroll {
    in property <[string]> model <=> i-base.model;
    in property <bool> enabled <=> i-base.enabled;
    out property <bool> has-focus <=> i-base.has-focus;
    in-out property <int> current-index <=> i-base.current-index;
    in-out property <string> current-value <=> i-base.current-value;

    callback selected <=> i-base.selected;

    min-width: max(160px, i-layout.min-height);
    min-height: max(32px, i-layout.min-height);
    horizontal-stretch: 1;
    vertical-stretch: 0;
    forward-focus: i-base;

    states [
        disabled when !root.enabled : {
            i-background.background: ReelixPalette.control-disabled;
            i-background.border-color: ReelixPalette.border;
            i-text.color: ReelixPalette.text-disabled;
            i-icon.colorize: ReelixPalette.text-disabled;
        }
        pressed when i-base.pressed : {
            i-background.background: ReelixPalette.control-alt-tertiary;
            i-background.border-color: ReelixPalette.border;
            i-text.color: ReelixPalette.text-secondary;
            i-icon.colorize: ReelixPalette.text-tertiary;
        }
        hover when i-base.has-hover : {
            i-background.background: ReelixPalette.control-secondary;
        }
    ]

    i-base := ComboBoxBase {
        width: 100%;
        height: 100%;

        show-popup => {
            i-popup.show();
        }
        close-popup => {
            i-popup.close();
        }
    }

    i-background := Rectangle {
        border-radius: 3px;
        background: ReelixPalette.control-background;
        border-width: 1px;
        border-color: ReelixPalette.control-border;

        animate border-color { duration: 200ms; }

        i-layout := HorizontalLayout {
            padding-left: 11px;
            padding-right: 11px;
            spacing: 8px;

            i-text := Text {
                horizontal-alignment: left;
                vertical-alignment: center;
                font-size: ReelixFontSettings.body.font-size;
                font-weight: ReelixFontSettings.body.font-weight;
                color: ReelixPalette.control-foreground;
                text: root.current-value;
            }

            i-icon := Image {
                colorize: ReelixPalette.text-secondary;
                width: 12px;
                source: Icons.dropdown;
                y: 2px;

                animate colorize { duration: 150ms; }
            }
        }
    }

    // focus border
    if (root.has-focus && root.enabled) : FocusBorder {
        border-radius: i-background.border-radius;
    }

    i-popup := PopupWindow {
        x: 0;
        y: -4px;
        width: root.width;
        height: min(inner.preferred-width * 2);

        Rectangle {
            background: ReelixPalette.control-background;
            border-radius: 3px;
            border-width: 1px;
            border-color: Palette.border;
        }
        ScrollView {
            inner := VerticalLayout {
                padding: 4px;

                for value[index] in root.model : ListItem {
                    item: { text: value };
                    is-selected: index == root.current-index;
                    has-hover: i-touch-area.has-hover;
                    pressed: i-touch-area.pressed;
                    i-touch-area := TouchArea {
                        clicked => {
                            i-base.select(index);
                        }
                    }
                }
            }
        }
    }
}