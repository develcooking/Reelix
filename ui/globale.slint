import { Palette } from "std-widgets.slint";
export global Others  {
    in property <bool> widgets-enabled: true;
}
export global Logic {
    callback open-url(string);
    callback cabavalueofcombobox(string);
    callback createtype(string);
    callback ossupport-value(bool);
    callback makerecord(string);
    callback commentrequest(string);
    callback location(string);
    callback OperatingSystem(string);
    callback currentselrecord(string);
}
export component FocusBorder inherits Rectangle {
    border-width: 2px;
    border-color: ReelixPalette.focus-stroke-outer;

    Rectangle {
        x: parent.border-width;
        y: parent.border-width;
        width: parent.width - 2 * parent.border-width;
        height: parent.height - 2 * parent.border-width;
        border-width: 1px;
        border-radius: parent.border-radius - 2px;
        border-color: ReelixPalette.focus-stroke-inner;
    }
}
export component MenuBorder inherits Rectangle {
    border-radius: 7px;
    background: ReelixPalette.alternate-background;
    drop-shadow-blur: 16px;
    drop-shadow-offset-y: 8px;
    drop-shadow-color: ReelixPalette.shadow;

    Rectangle {
        border-width: 1px;
        border-radius: parent.border-radius;
        border-color: ReelixPalette.control-background-stroke-flyout;
    }
}

export component ListItem {
    in property <bool> is-selected;
    in property <StandardListViewItem> item;
    in property <bool> has-focus;
    in property <bool> has-hover;
    in property <bool> pressed;
    in property <int> index;
    in property <length> pressed-x;
    in property <length> pressed-y;

    min-width: i-layout.min-width;
    min-height: max(40px, i-layout.min-height);
    vertical-stretch: 0;
    horizontal-stretch: 1;

    states [
        pressed when root.pressed : {
            i-background.background: is-selected ? #282828  : #1e1e1e;
        }
        hover when root.has-hover : {
            i-text.color: #d0d0d0;
            i-background.background: is-selected ? #282828  : #1e1e1e;
            i-selector.height: root.is-selected ? 16px : 0;
        }
        is-selected when root.is-selected : {
            i-background.background: #2c2c2c;
            i-selector.height: 16px;
        }
    ]

    if (root.has-focus) : FocusBorder {
        border-radius: 4px;
    }

    i-background := Rectangle {
        width: root.width - 6px;
        height: root.height - 4px;
        background: transparent;
        border-radius: 4px;

        animate background { duration: 150ms; }

        i-layout := HorizontalLayout {
            padding-left: 16px;
            padding-right: 16px;
            spacing: 4px;

            i-text := Text {
                text: root.item.text;
                /*color: ReelixPalette.control-foreground;
                font-size: FluentFontSettings.body.font-size;
                font-weight: FluentFontSettings.body.font-weight;*/
                vertical-alignment: center;
                horizontal-alignment: left;
                overflow: elide;

                animate color { duration: 200ms; }
            }
        }

        i-selector := Rectangle {
            x: 0px;
            y: (parent.height - self.height) / 2;
            width: 3px;
            height: 0px;
            background: Palette.accent-background;
            border-radius: 2px;

            animate height { duration: 150ms; easing: ease-out; }
        }
    }

    @children
}

export struct TextStyle {
    font-size: relative-font-size,
    font-weight: int,
}

export global ReelixFontSettings {
    out property <int> light-font-weight: 300;
    out property <int> regular-font-weight: 400;
    out property <int> semibold-font-weight: 600;
    out property <TextStyle> body: {
        font-size: 14 * 0.0769rem,
        font-weight: regular-font-weight
    };
    out property <TextStyle> body-strong: {
        font-size: 14 * 0.0769rem,
        font-weight: semibold-font-weight
    };
}
export global ReelixPalette {
    in property <bool> night-mode: false;
    // base palette
    out property <brush> background:root.night-mode ? #1C1C1C : #FAFAFA;
    out property <brush> foreground:root.night-mode ? #FFFFFF : #030303;
    out property <brush> alternate-background:root.night-mode ? #2C2C2C : #f0f0f0;
    out property <brush> alternate-foreground:root.night-mode ? #FFFFFF : #030303;
    out property <color> control-background: root.night-mode ? #2c2c2c : #d0d0d0;
    out property <brush> control-foreground:root.night-mode ? #FFFFFF : #030303;
    out property <brush> accent-background:root.night-mode ? #60CDFF : #005FB8;
    out property <brush> accent-foreground:root.night-mode ? #000000 : #FFFFFF;
    out property <brush> selection-background: #0078D4;
    out property <brush> selection-foreground:root.night-mode ? #000000 : #FFFFFF;
    out property <brush> border:root.night-mode ? #313131 : #111111;

    // additional palette
    out property <brush> secondary-accent-background:root.night-mode ? #60CDFFE6 : #005FB8E6;
    out property <brush> tertiary-accent-background:root.night-mode ? #60CDFFCC : #005FB8CC;
    out property <brush> accent-disabled:root.night-mode ? #FFFFFF29 : #00000038;
    out property <brush> accent-control-border:root.night-mode ? @linear-gradient(180deg, #FFFFFF14 90.67%, #00000024 100%)
        : @linear-gradient(180deg, #FFFFFF14 90.67%, #00000066 100%);
    out property <brush> control-border:root.night-mode ? @linear-gradient(180deg, #FFFFFF17 0%, #00000012 8.33%)
        : @linear-gradient(180deg, #0000000F 90.58%, #00000029 100%);
    out property <brush> text-accent-foreground-secondary:root.night-mode ? #00000080 : #FFFFFFB3;
    out property <brush> text-accent-foreground-disabled:root.night-mode ? #FFFFFF87 : #FFFFFF;
    out property <brush> text-secondary:root.night-mode ? #FFFFFFC9 : #00000099;
    out property <brush> text-tertiary:root.night-mode ? #FFFFFF8A : #00000073;
    out property <brush> text-disabled:root.night-mode ? #FFFFFF5E : #0000005E;
    out property <brush> text-control-border:root.night-mode ? @linear-gradient(180deg, #FFFFFF14 99.98%, #FFFFFF8A 100%, #FFFFFF8A 100%)
        : @linear-gradient(180deg, #0000000F 99.99%, #00000073 100%, #00000073 100%);
    out property <brush> control-secondary:root.night-mode ? #FFFFFF14 : #F9F9F980;
    out property <brush> control-tertiary:root.night-mode ? #FFFFFF08 : #F9F9F94D;
    out property <brush> control-disabled:root.night-mode ? #FFFFFF0A : #F9F9F94D;
    out property <brush> control-alt-secondary:root.night-mode ? #0000001A : #00000005;
    out property <brush> control-alt-tertiary:root.night-mode ? #FFFFFF0A : #0000000F;
    out property <brush> control-alt-quartiary:root.night-mode ? #FFFFFF12 : #00000017;
    out property <brush> control-alt-disabled: transparent;
    out property <brush> control-strong-stroke:root.night-mode ? #FFFFFF99 : #00000099;
    out property <brush> control-strong-stroke-disabled:root.night-mode ? #FFFFFF29 : #00000038;
    out property <brush> control-solid:root.night-mode ? #454545: #FFFFFF;
    out property <brush> circle-border:root.night-mode ? @linear-gradient(180deg, #FFFFFF17 0%, #FFFFFF12 100%)
    : @linear-gradient(180deg, #0000000F 0%, #00000029 100%);
    out property <brush> control-input-active:root.night-mode ? #1E1E1EB3 : #FFFFFF;
    out property <brush> focus-stroke-inner:root.night-mode ? #000000B3 : #FFFFFF;
    out property <brush> focus-stroke-outer:root.night-mode ? #FFFFFF : #000000E6;
    out property <brush> control-background-stroke-flyout:root.night-mode ? #00000033 : #0000000F;
    out property <brush> sub-title-secondary:root.night-mode ? #FFFFFF0F : #0000000A;
    out property <brush> sub-title-tertiary:root.night-mode ? #FFFFFF0A : #00000005;
    out property <brush> shadow:root.night-mode ? #00000042 : #00000024;
    out property <brush> subtle:root.night-mode ? #FFFFFF0F : #0000000A;
    out property <brush> subtle-secondary:root.night-mode ? #FFFFFF0F : #0000000A;
    out property <brush> subtle-tertiary:root.night-mode ? #FFFFFF0A : #00000005;
    out property <brush> divider:root.night-mode ? #FFFFFF14 : #00000014;
    out property <brush> layer-on-mica-base-alt:root.night-mode ? #3A3A3A73 : #FFFFFFB3;
    out property <brush> layer-on-mica-base-alt-secondary:root.night-mode ? #FFFFFF0F : #0000000A;
    out property <brush> card-stroke:root.night-mode ? #0000001A : #0000000F;
}
export global Icons {
    out property <image> dropdown: @image-url("../images/_dropdown.svg");
}