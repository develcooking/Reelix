import { VerticalBox, GroupBox, TextEdit, HorizontalBox, LineEdit, Button } from "std-widgets.slint";
import { ComboBoxScroll } from "../ComboBoxScroll.slint";
import { RadioButton, RadioBoxes } from "../RadioButton.slint";
import { Logic, Others } from "../globale.slint";
export component RecordPage inherits Rectangle {
    in property <[string]> the_model;
    in-out property <string> thedate;
    in property <bool> ossupportbox-value;

    HorizontalBox {
        alignment: center;
        padding: 5px;
        VerticalBox {
            GroupBox {
                VerticalBox {
                    alignment: center;
                    spacing: 30px;
                    HorizontalBox {
                        alignment: center;
                        padding-top: -20px;
                        combox := ComboBoxScroll {
                            width: 560px;
                            height: 40px;
                            model: the_model;
                            selected => {Logic.currentselrecord(self.current-value);
                            if (ossupportbox-value == false){
                                Others.widgets-enabled = false;
                            }else {Others.widgets-enabled = true;}
                            }
                            init => {Logic.currentselrecord(self.current-value);
                                if (ossupportbox-value == false){
                                    Others.widgets-enabled = false;
                                }else {Others.widgets-enabled = true;}
                                }
                            }
                        }

                    HorizontalBox {
                        padding-top: -15px;
                        padding-bottom: -5px;
                        function unsel() {
                            b_indipendent.checked = false;
                            b_win.checked = false;
                            b_linux.checked = false;
                            b_macos.checked = false;
                            b_iOSiPadOS.checked = false;
                            b_android.checked = false;
                            b_others.checked = false;
                        }

                        alignment: stretch;
                        b_indipendent := RadioBoxes { text: "Independent"; enabled: Others.widgets-enabled; checked: true; clicked => { if (b_indipendent.enabled) { unsel(); b_indipendent.checked = true; Logic.OperatingSystem(self.text); } else { Logic.OperatingSystem("None"); } } init => { if (b_indipendent.enabled) { unsel(); b_indipendent.checked = true; Logic.OperatingSystem(self.text); } else { Logic.OperatingSystem("None"); } } }
                        b_win := RadioBoxes { text: "Windows"; enabled: Others.widgets-enabled; clicked => { if (b_win.enabled) { unsel(); b_win.checked = true; Logic.OperatingSystem(self.text); } else { Logic.OperatingSystem("NONE"); } } }
                        b_linux := RadioBoxes { text: "Linux"; enabled: Others.widgets-enabled; clicked => { if (b_linux.enabled) { unsel(); b_linux.checked = true; Logic.OperatingSystem(self.text); } else { Logic.OperatingSystem("None"); } } }
                        b_macos := RadioBoxes { text: "MacOS"; enabled: Others.widgets-enabled; clicked => { if (b_macos.enabled) { unsel(); b_macos.checked = true; Logic.OperatingSystem(self.text); } else { Logic.OperatingSystem("None"); } } }
                        b_iOSiPadOS := RadioBoxes { text: "iOS/iPadOS"; enabled: Others.widgets-enabled; clicked => { if (b_iOSiPadOS.enabled) { unsel(); b_iOSiPadOS.checked = true; Logic.OperatingSystem(self.text); } else { Logic.OperatingSystem("None"); } } }
                        b_android := RadioBoxes { text: "Android"; enabled: Others.widgets-enabled; clicked => { if (b_android.enabled) { unsel(); b_android.checked = true; Logic.OperatingSystem(self.text); } else { Logic.OperatingSystem("None"); } } }
                        b_others := RadioBoxes { text: "Others"; enabled: Others.widgets-enabled; clicked => { if (b_others.enabled) { unsel(); b_others.checked = true; Logic.OperatingSystem(self.text); } else { Logic.OperatingSystem("None"); } } }
                    }
                }
            }

            comment := LineEdit {
                text: "";
                placeholder-text: "Place your Comment into here";
                preferred-height: root.height;
            }

            HorizontalBox {
                Button {
                    text: thedate;
                }

                HorizontalBox {
                    function unsel() { r1.checked = false; r2.checked = false; r3.checked = false; }
                    alignment: center;
                    r1 := RadioButton { text: "RZ"; checked: true; clicked => { unsel(); r1.checked = true; Logic.location(self.text) } init () => { unsel(); r1.checked = true; Logic.location(self.text) } }
                    r2 := RadioButton { text: "TB:lokal"; clicked => { unsel(); r2.checked = true; Logic.location(self.text) } }
                    r3 := RadioButton { text: "TB:tel/OTRS"; clicked => { unsel(); r3.checked = true; Logic.location(self.text) } }
                }

                Button {
                    text: "Save Record";
                    primary: true;
                    clicked => {
                        Logic.commentrequest(comment.text);
                        Logic.makerecord(combox.current-value);
                    }
                }
            }
        }
    }
}