import { GridBox, LineEdit, HorizontalBox, Button, VerticalBox, CheckBox } from "std-widgets.slint";
import { ComboBoxScroll } from "../ComboBoxScroll.slint";
import { Logic, Others } from "../globale.slint";

export component CategoriesPage {
    in property <[string]> the_model;
    in property <bool> ossupportbox-value;

    VerticalBox {
        HorizontalBox {
            Text {
                horizontal-alignment: center;
                vertical-alignment: center;
                text: @tr("Create a Type");
                font-size: 14px;
                height: 10%;
            }
            Text {
                horizontal-alignment: center;
                vertical-alignment: center;
                text: @tr("Remove a Type");
                font-size: 14px;
                height: 10%;
            }
        }

        GridBox {
            Row {
                newtypeinput := LineEdit {
                    font-size: 16px;
                    placeholder-text: @tr("How should your Type be called");
                    padding: 8px;
                    edited => {if (self.text != ""){
                    createbtn.enabled = true;}
                }
                }
                valueofcombobox := ComboBoxScroll {
                    height: 60px;
                    width: 45%;
                    model: the_model;
                    current-value: "Select a Category to Remove";
                    selected => {Logic.currentselrecord(self.current-value);
                        removebtn.enabled = true;}
                    init => {Logic.currentselrecord(self.current-value)}
                }

            }
            Row {
                osbox := CheckBox { text: "Support OS selection"; }
                CheckBox {
                    checked: ossupportbox-value;
                    text: "Supports OS selection";
                    enabled: false;
                }
            }
            Row {
                createbtn :=Button {
                    text: @tr("Insert into Databank");
                    padding: 8px;
                    max-height: 30px;
                    enabled: false;
                    clicked => {
                        Logic.createtype(newtypeinput.text);
                        Logic.ossupport-value(osbox.checked);
                    }
                }
                removebtn := Button {
                    max-height: 30px;
                    text: @tr("Remove");
                    enabled: false;
                    clicked => {//sends a callback to cabavalueofcombobox with the current value of the combobox
                        Logic.cabavalueofcombobox(valueofcombobox.current-value);
                        removebtn.enabled = false;
                        valueofcombobox.current-value = "Select a Category to Remove";// resetz the current value back to Default
                    }
                }
            }
        }
    }
}